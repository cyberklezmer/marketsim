/**

\mainpage MarketSim

\section intro Introduction

MarketSim is a simple simulation framework for testing strategies on limit order markets.

\section instal Installation

MarketSim is a header only library, so it suffices to copy it somewhere. It is defined within the \p marketsim namespace. It uses an <a href="https://github.com/cyberklezmer/orpp">orpp library</a> and Chronos (see below) libreraries. Currently, two versions are available: the "real-time" (RT) one, where strategies can be run synchronously, being executed within their own uniterrupted code, and the "event driven" (ED) one, where the strategies are run asynchronously, being obliged to provide handlers, coalled by the simulator. The ED strategies can be run under the RT version but not vice versa. The advatage of the RT version is easier implementation of the strategies (e.g. local state variables) and greater flexibility, the advantage ED version is that it does not uses threads, which e.g. simplifies development. 


\section func How it Works?


Simply. To implement your strategy, you must derive your ancestor(s) of class marketsim::tstrategy (RT) or marketsim::teventdrivenstrategy (ED). For "training" purposes, you can use funcions like marketsim::testsingle, marketsim::competesingle etc. To put your to the ring with the other strategies, you (or someone else) could use marketsim::compentition.	.

If your strategy is RT, then you have to implement marketsim::tstrategy::trade method, within which you call marketsim::tstrategy::getinfo to query the current status of the market and marketsim::tstrategy::request to put/cancel your orders. To wait, you can call marketsim::tstrategy::sleepfor or marketsim::tstrategy::sleepuntil. You trade until marketsim::tstrategy::endoftrading is \p true. 

ED strategies, on the other hand, have to implement the marketsim::teventdrivenstrategy::event method, which takes the market info as argument, and returns a (possibly empty) request to the market; within the function, one could adjust the delay between calls of marketsim::teventdrivenstrategy::event by marketsim::teventdrivenstrategy::setinterval method.

Your marketsim::trequest may contain (request) to consume certain amount of cash you hold and/or (a request to put or cancel) limit orders as weel as market orders (which are, however, technically equivalent to limit orders with infinite limit prices). The algorithm of processing the request works as follows: upon arrival (in simulated time) of the request, the consumption part of the request is, in case of sufficient cash amount, fulfilled and the order request is matched with the presently valid orders according to the clean FIFO algorithm. In case that the request is invalid (e.g. contains crossed orders), or there is not enougn cash for consumption, or some other error occus (e.g. inventory and/or cash amount is not sufficient to buy/sell or to put and order and the request is fulfilled partially) the error report added to marketsim::tstrategy::trequestresult, returned by the caller. To make implmentation easier (e.g. for market making strategies), cancelling an order and putting the same one is regarded as leaving the order unchanged (if the order were indeed cancelled and re-put, then it would possibly lose its advatageous position in the queue; thus, this feature relieves the caller from checking own existing corders). 

The time is measured by marketsim::tabstime. One unit of this time is intended to correspond to one second. For this to be at least roudhly true, the market definition (instance of marketsim::tmarketdef), serving as an input for the simulations, has to be calibrated first by its method marketsim::tmarketdef::calibrate. 
The simulation can be run once by using marketsim::tmarket:run, or repeatedly (to distinguish systematic differences from random ones) by marketsim::compete procedure. See the documentation of the classes and an example:


\include main.cpp

\section Copyright

The code of was exclusively written by Martin Smid and may be commercially used only under his permission.


\section Verstion history

1.97

- heuristic strategy added
- minor conservative fixes

1.96
- New option marketsim::tloggingfilter.fprotocol, which, if true, prints a protocol of every run on the end of the log, see marketsim::tmarketdata::protocol

- new template parameter \c cancelling of  marketsim::dsmaslovcompetition - if true (is default), then the limit orders are cancelled, so they do not grow with time

- the bug, throwing quotations if they were the same as previous, corrected

1.97
- bug preventing market orders fixed

*/
